# frozen_string_literal: true

require "spec_helper"

RSpec.describe MriHook::Models::BillingItem do
  let(:billing_item_data) do
    {
      "UnitUniqueTag" => "GCNS01~01~STR",
      "ChargeID" => "0000466294",
      "PropertyID" => "GCNS01",
      "ResidentID" => "0000000502",
      "FirstName" => "TAMEZ SANDOVAL",
      "LastName" => "EDGAR ELIUD",
      "ChargeDate" => "2025-05-01T00:00:00",
      "Description" => "AUTOCHRG @T5/31/2025",
      "ChargeCode" => "BOI",
      "ChargeCodeDescription" => "Renta de Bodega",
      "OriginalAmount" => "775.85",
      "UnpaidAmount" => "775.85",
      "IsLateFee" => "N",
      "IsAutoGenerated" => "Y",
      "GroupID" => "0000000502",
      "Posted" => "Y"
    }
  end

  subject { described_class.new(billing_item_data) }

  describe "#initialize" do
    it "sets attributes from the data" do
      expect(subject.unit_unique_tag).to eq("GCNS01~01~STR")
      expect(subject.charge_id).to eq("0000466294")
      expect(subject.property_id).to eq("GCNS01")
      expect(subject.resident_id).to eq("0000000502")
      expect(subject.first_name).to eq("TAMEZ SANDOVAL")
      expect(subject.last_name).to eq("EDGAR ELIUD")
      expect(subject.charge_date).to eq("2025-05-01T00:00:00")
      expect(subject.description).to eq("AUTOCHRG @T5/31/2025")
      expect(subject.charge_code).to eq("BOI")
      expect(subject.charge_code_description).to eq("Renta de Bodega")
      expect(subject.original_amount).to eq("775.85")
      expect(subject.unpaid_amount).to eq("775.85")
      expect(subject.is_late_fee).to eq("N")
      expect(subject.is_auto_generated).to eq("Y")
      expect(subject.group_id).to eq("0000000502")
      expect(subject.posted).to eq("Y")
    end
  end

  describe "#full_name" do
    it "returns the full name" do
      expect(subject.full_name).to eq("TAMEZ SANDOVAL EDGAR ELIUD")
    end

    context "when first_name is nil" do
      before { subject.first_name = nil }

      it "returns just the last name" do
        expect(subject.full_name).to eq("EDGAR ELIUD")
      end
    end

    context "when last_name is nil" do
      before { subject.last_name = nil }

      it "returns just the first name" do
        expect(subject.full_name).to eq("TAMEZ SANDOVAL")
      end
    end
  end

  describe "#late_fee?" do
    context "when is_late_fee is 'Y'" do
      before { subject.is_late_fee = "Y" }

      it "returns true" do
        expect(subject.late_fee?).to be true
      end
    end

    context "when is_late_fee is not 'Y'" do
      before { subject.is_late_fee = "N" }

      it "returns false" do
        expect(subject.late_fee?).to be false
      end
    end
  end

  describe "#auto_generated?" do
    context "when is_auto_generated is 'Y'" do
      before { subject.is_auto_generated = "Y" }

      it "returns true" do
        expect(subject.auto_generated?).to be true
      end
    end

    context "when is_auto_generated is not 'Y'" do
      before { subject.is_auto_generated = "N" }

      it "returns false" do
        expect(subject.auto_generated?).to be false
      end
    end
  end

  describe "#posted?" do
    context "when posted is 'Y'" do
      before { subject.posted = "Y" }

      it "returns true" do
        expect(subject.posted?).to be true
      end
    end

    context "when posted is not 'Y'" do
      before { subject.posted = "N" }

      it "returns false" do
        expect(subject.posted?).to be false
      end
    end
  end

  describe "#original_amount_value" do
    it "returns the original amount as a float" do
      expect(subject.original_amount_value).to eq(775.85)
    end
  end

  describe "#unpaid_amount_value" do
    it "returns the unpaid amount as a float" do
      expect(subject.unpaid_amount_value).to eq(775.85)
    end
  end
end
