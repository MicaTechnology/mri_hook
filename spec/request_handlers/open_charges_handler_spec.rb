# frozen_string_literal: true

require "spec_helper"

RSpec.describe MriHook::RequestHandlers::OpenChargesHandler do
  let(:handler) { described_class.new }
  let(:property_id) { "GCNS01" }
  let(:last_update) { "2024-01-01" }
  let(:resident_id) { "0000000502" }
  let(:api_endpoint) { "MRI_S-PMRM_OpenCharges" }

  let(:response_body) do
    {
      "odata.metadata" => "https://mrix5api.saas.mrisoftware.com/mriapiservices/api.asp?$api=MRI_S-PMRM_OpenCharges&$metadata#MRI.mri_s-pmrm_opencharges-container/mri_s-pmrm_opencharges",
      "nextLink" => "https://mrix5api.saas.mrisoftware.com/mriapiservices/api.asp?%24api=MRI_S-PMRM_OpenCharges&RMPROPID=GCNS01&%24format=json&ResidentID=0000000519&%24top=300&%24skip=301",
      "value" => [
        {
          "UnitUniqueTag" => "GCNS01~01~STR",
          "ChargeID" => "0000466294",
          "PropertyID" => "GCNS01",
          "ResidentID" => "0000000502",
          "FirstName" => "TAMEZ SANDOVAL",
          "LastName" => "EDGAR ELIUD",
          "ChargeDate" => "2025-05-01T00:00:00",
          "Description" => "AUTOCHRG @T5/31/2025",
          "ChargeCode" => "BOI",
          "ChargeCodeDescription" => "Renta de Bodega",
          "OriginalAmount" => "775.85",
          "UnpaidAmount" => "775.85",
          "IsLateFee" => "N",
          "IsAutoGenerated" => "Y",
          "GroupID" => "0000000502",
          "Posted" => "Y"
        },
        {
          "UnitUniqueTag" => "GCNS01~01~STR",
          "ChargeID" => "0000466295",
          "PropertyID" => "GCNS01",
          "ResidentID" => "0000000502",
          "FirstName" => "TAMEZ SANDOVAL",
          "LastName" => "EDGAR ELIUD",
          "ChargeDate" => "2025-05-01T00:00:00",
          "Description" => "AUTOCHRG @T5/31/2025",
          "ChargeCode" => "CAI",
          "ChargeCodeDescription" => "Cajones Adicionales",
          "OriginalAmount" => "862.06",
          "UnpaidAmount" => "862.06",
          "IsLateFee" => "N",
          "IsAutoGenerated" => "Y",
          "GroupID" => "0000000502",
          "Posted" => "Y"
        }
      ]
    }
  end

  before do
    # Mock the API client
    allow(handler.api_client).to receive(:get).and_return(response_body)
  end

  describe "#execute" do
    context "with property_id parameter" do
      it "calls the API with the correct parameters" do
        expect(handler.api_client).to receive(:get).with(
          api_endpoint,
          { "RMPROPID" => property_id }
        )

        handler.execute(property_id: property_id)
      end

      it "returns an array of BillingItem objects" do
        billing_items = handler.execute(property_id: property_id)

        expect(billing_items).to be_an(Array)
        expect(billing_items.size).to eq(2)
        expect(billing_items.first).to be_a(MriHook::Models::BillingItem)
        expect(billing_items.first.charge_id).to eq("0000466294")
        expect(billing_items.last.charge_id).to eq("0000466295")
      end
    end

    context "with last_update parameter" do
      it "calls the API with the correct parameters" do
        expect(handler.api_client).to receive(:get).with(
          api_endpoint,
          { "LASTUPDATE" => last_update }
        )

        handler.execute(last_update: last_update)
      end
    end

    context "with property_id and resident_id parameters" do
      it "calls the API with the correct parameters" do
        expect(handler.api_client).to receive(:get).with(
          api_endpoint,
          { "RMPROPID" => property_id, "ResidentID" => resident_id }
        )

        handler.execute(property_id: property_id, resident_id: resident_id)
      end
    end

    context "with missing required parameters" do
      it "raises an ArgumentError when no parameters are provided" do
        expect { handler.execute }.to raise_error(ArgumentError, /Required parameters missing/)
      end
    end

    context "when the API returns no billing items" do
      before do
        allow(handler.api_client).to receive(:get).and_return({ "value" => [] })
      end

      it "returns an empty array" do
        billing_items = handler.execute(property_id: property_id)

        expect(billing_items).to be_an(Array)
        expect(billing_items).to be_empty
      end
    end

    context "when the API returns no value key" do
      before do
        allow(handler.api_client).to receive(:get).and_return({})
      end

      it "returns an empty array" do
        billing_items = handler.execute(property_id: property_id)

        expect(billing_items).to be_an(Array)
        expect(billing_items).to be_empty
      end
    end
  end
end
