# frozen_string_literal: true

module MriHook
  module Models
    class BillingItem
      attr_accessor :unit_unique_tag, :charge_id, :property_id, :resident_id,
                    :first_name, :last_name, :charge_date, :description,
                    :charge_code, :charge_code_description, :original_amount,
                    :unpaid_amount, :is_late_fee, :is_auto_generated,
                    :group_id, :posted

      # Initialize a new BillingItem object
      #
      # @param [Hash] params the parameters to initialize the object with
      def initialize(params = {})
        @unit_unique_tag = params['UnitUniqueTag']
        @charge_id = params['ChargeID']
        @property_id = params['PropertyID']
        @resident_id = params['ResidentID']
        @first_name = params['FirstName']
        @last_name = params['LastName']
        @charge_date = params['ChargeDate']
        @description = params['Description']
        @charge_code = params['ChargeCode']
        @charge_code_description = params['ChargeCodeDescription']
        @original_amount = params['OriginalAmount']
        @unpaid_amount = params['UnpaidAmount']
        @is_late_fee = params['IsLateFee']
        @is_auto_generated = params['IsAutoGenerated']
        @group_id = params['GroupID']
        @posted = params['Posted']
      end

      # Get the full name of the resident
      #
      # @return [String] the full name
      def full_name
        "#{first_name} #{last_name}".strip
      end

      # Check if the billing item is a late fee
      #
      # @return [Boolean] true if the billing item is a late fee
      def late_fee?
        is_late_fee == 'Y'
      end

      # Check if the billing item is auto-generated
      #
      # @return [Boolean] true if the billing item is auto-generated
      def auto_generated?
        is_auto_generated == 'Y'
      end

      # Check if the billing item is posted
      #
      # @return [Boolean] true if the billing item is posted
      def posted?
        posted == 'Y'
      end

      # Get the original amount as a float
      #
      # @return [Float] the original amount
      def original_amount_value
        original_amount.to_f
      end

      # Get the unpaid amount as a float
      #
      # @return [Float] the unpaid amount
      def unpaid_amount_value
        unpaid_amount.to_f
      end
    end
  end
end
